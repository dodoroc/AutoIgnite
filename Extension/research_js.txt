document.querySelector('tv-app').__data__.entityRecordings.entities[1].resource.getParent().getBase()
let aa = document.querySelector('tv-app').__data__.watchedPrograms
let aa = document.querySelector('tv-app')

async function readData(url) {
  const response = await fetch(url);
  const reader = response.body.getReader();
  let str = '';

  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      // Do something with last chunk of data then exit reader
      str = String.fromCharCode.apply(null, value);
      console.log(str);
      return;
    }
    // Otherwise do something here to process current chunk
    str = String.fromCharCode.apply(null, value);
    console.log(str);
  }
};
readData('/watchedprograms/');


async function watched(url) {
  const response = await fetch(url);
  const reader = response.body.getReader();
  for await (const chunk of reader.read()) {
    console.log(chunk);
  }
}
watched('/watchedprograms/');




/*
GET /watchedprograms/ HTTP/1.1
Accept: application/comcast+hal+json, application/json, * /*; q=0.01
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Authorization: CCP 
CLIENT-PLATFORM: web;linear-tve;local-tve;est;i18n-ratings;beta-channels;standard-sports-images;session;livod;local-tve-nbc-v3;record-tve
Connection: keep-alive
Fingerprint: cloudtv_web_polymer_7.4.0_prod_1710980420489_10790
Host: xtvapi.cloudtv.comcast.net
If-None-Match: "078585a03593936defaf705e0c9d435bd500103a22a9779a1424bba13926f185b"
Origin: https://ignitetv.rogers.com
Referer: https://ignitetv.rogers.com/
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: cross-site
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0
X-Finity-Accept-Language: en-CA
X-Finity-Client-Info: app_name="Ignite TV"; app_version="7.4.0"; os_name="Web"; web_user_agent="Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F122.0.0.0%20Safari%2F537.36%20Edg%2F122.0.0.0"
X-Finity-Features: fd6VJcdTlqbCNFnq2l/et7E840mX0a7yf65CdoT20UWT5J2HUt4B6wKb1HgTRIzfOvFAv5OdQnR7K1/znmvgApg2CTHM5ZTaDKkWFSxK/+EmvgXF5ZEiV1n2rkG5zHSGpxfvJTJQulA6EEqG
X-HyperGard: 6.0.0
sec-ch-ua: "Chromium";v="122", "Not(A:Brand";v="24", "Microsoft Edge";v="122"
sec-ch-ua-mobile: ?0
sec-ch-ua-platform: "Windows"
*/


async function watched() {
  let hdrs = {
    'Accept': 'application/comcast+hal+json, application/json, */*; q=0.01',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept-Language': 'en-US,en;q=0.9',
    'Origin': 'https://ignitetv.rogers.com',
    'Referer': 'https://ignitetv.rogers.com/',
    'Host': 'xtvapi.cloudtv.comcast.net',
    'Connection': 'keep-alive',

    
    // 'Sec-Ch-Ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Microsoft Edge";v="122"',
    // 'Sec-Ch-Ua-Mobile': '?0',
    // 'Sec-Ch-Ua-Platform': '"Windows"',
    // 'Sec-Fetch-Dest': 'empty',
    // 'Sec-Fetch-Mode': 'cors',
    // 'Sec-Fetch-Site': 'cross-site',

    // 'If-None-Match': '"078585a03593936defaf705e0c9d435bd500103a22a9779a1424bba13926f185b"',

    // 'CLIENT-PLATFORM': 'web;linear-tve;local-tve;est;i18n-ratings;beta-channels;standard-sports-images;session;livod;local-tve-nbc-v3;record-tve',
    // 'Fingerprint': 'cloudtv_web_polymer_7.4.0_prod_1710980420489_10790',

    // 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0',
    

    // 'X-Finity-Accept-Language': 'en-CA',
    // 'X-Finity-Client-Info': 'app_name="Ignite TV"; app_version="7.4.0"; os_name="Web"; web_user_agent="Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F122.0.0.0%20Safari%2F537.36%20Edg%2F122.0.0.0"',
    // 'X-Finity-Features': 'fd6VJcdTlqbCNFnq2l/et7E840mX0a7yf65CdoT20UWT5J2HUt4B6wKb1HgTRIzfOvFAv5OdQnR7K1/znmvgApg2CTHM5ZTaDKkWFSxK/+EmvgXF5ZEiV1n2rkG5zHSGpxfvJTJQulA6EEqG',
    // 'X-Hypergard': '6.0.0',


    'Authorization': 'CCP ' + localStorage.getItem('tv-xsct'),
  };

  const response = await fetch('https://xtvapi.cloudtv.comcast.net/watchedprograms/', {'headers':hdrs});
  const reader = response.body.getReader();
  let json = '';

  while (true) {
    let { done, value } = await reader.read();
    if (value) {
      for (const c of value) {
        json += String.fromCharCode(c);
      }
      
    }
    //json += String.fromCharCode.apply(null, value);
    //json += String.fromCodePoint(...value);
    //if (value) json += value.toString();
    
    if (done) break;
  }
  console.log(JSON.parse(json));
  //console.log(json.slice(0,20));
  //console.log(String.fromCharCode.apply(null, json));

/*
  for await (const chunk of reader.read()) {
    //console.log(chunk.value);
    console.dir(chunk);
  }
*/

  /*
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      // Do something with last chunk of data then exit reader
      str = String.fromCharCode.apply(null, value);
      console.log(str);
      return;
    }
    // Otherwise do something here to process current chunk
    str = String.fromCharCode.apply(null, value);
    console.log(str);
  }
  */

} watched();







async function totes() {
  let hdrs = {
    'Authorization': 'CCP ' + localStorage.getItem('tv-xsct'),
  };
  
  let par = new URLSearchParams({
  });
  let url = 'https://xtvapi.cloudtv.comcast.net/totes/';
  
  
  const response = await fetch(url, {'headers':hdrs});
  console.dir(response);
  const reader = response.body.getReader();
  let json = '';

  while (true) {
    let { done, value } = await reader.read();
    if (value) {
      for (const c of value) {
        json += String.fromCharCode(c);
      }
      
    }
    //json += String.fromCharCode.apply(null, value);
    //json += String.fromCodePoint(...value);
    //if (value) json += value.toString();
    
    if (done) break;
  }
  console.log(JSON.parse(json));  
  
  
   
}  totes(); 




async function show() {
  let hdrs = {
    'Accept': 'application/comcast+hal+json, application/json, */*; q=0.01',
    'Accept-Encoding': 'gzip, deflate, br, zstd',
    'Accept-Language': 'en-US,en;q=0.9',
    'Origin': 'https://ignitetv.rogers.com',
    'Referer': 'https://ignitetv.rogers.com/',
    'Host': 'xtvapi.cloudtv.comcast.net',
    'Connection': 'keep-alive',
    'Referrer-Policy': 'strict-origin-when-cross-origin',

    'Sec-Fetch-Dest': 'empty',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'cross-site',

    'Client-Platform': 'web;linear-tve;local-tve;est;i18n-ratings;beta-channels;standard-sports-images;session;livod;local-tve-nbc-v3;record-tve',
    'Fingerprint': 'cloudtv_web_polymer_7.4.0_prod_1715677697788_51894',


    'X-Finity-Accept-Language': 'en-CA',
    'X-Finity-Client-Info': 'app_name="Ignite TV"; app_version="7.4.0"; os_name="Web"; web_user_agent="Web"',
    //'X-Finity-Client-Info': 'app_name="Ignite TV"; app_version="7.4.0"; os_name="Web"; web_user_agent="Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F124.0.0.0%20Safari%2F537.36%20Edg%2F124.0.0.0"',
    'X-Finity-Client-Info': 'app_name="Ignite TV"; app_version="7.4.0"; os_name="Web"; web_user_agent="Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F124.0.0.0%20Safari%2F537.36%20Edg%2F124.0.0.0"',
    'X-Finity-Features': 'gMZdSoLEc2uD8G/jJ3MLxC/d0BAR5Uc3OwoYghYJjnDfN/UDCPojQYTrqDDvXnAa+VQyVpXJEPUNRSMzd4AxU+m+2I/jSGRXK6QHyLzaORc/de9vrYfuQs2Iv1NtiA1eu/iRcHWQ7a+8Qp2x',
    'X-Hypergard': '6.0.0',

    'Content-Type': 'application/x-www-form-urlencoded',
    'Referrer-Policy': 'strict-origin-when-cross-origin',

    'Authorization': 'CCP ' + localStorage.getItem('tv-xsct'),
  };
  
  
  //8327465639090761112
  //6569521162354520112
  let par = new URLSearchParams({
    streamFormat: 'M3U',
    includeTve: true,
    includeTveLinear: true,
  });
  //let url = 'https://xtvapi.cloudtv.comcast.net/entity/detail/program/6569521162354520112/?' + par.toString();
  //let url = 'https://xtvapi.cloudtv.comcast.net/entity/detail/program/6569521162354520112/';
  //let url = 'https://xtvapi.cloudtv.comcast.net/entity/related/program/6569521162354520112/';
  //let url = 'https://xtvapi.cloudtv.comcast.net/entity/program/6569521162354520112/';
  //let url = 'https://xtvapi.cloudtv.comcast.net/entity/program/4964656856412905000/';
  //let url = 'https://xtvapi.cloudtv.comcast.net/entity/detail/program/4964656856412905000/';
  let url = 'https://xtvapi.cloudtv.comcast.net/entity/program/5649760609895628112/';
  
  
  const response = await fetch(url, {'headers':hdrs});
  console.log('--------------------');
  console.dir(response);
  const reader = response.body.getReader();
  let json = '';



  while (true) {
    const { done, chunk } = await reader.read();
    if (!done && chunk?.length) {
      for (const c of chunk) {
        json += String.fromCharCode(c);
      }
    }
    
    if (done) break;
  }
  console.log(JSON.parse(json));  
  
  
   
}  show(); 

///entity/related/program/{programId}/


















/*
markProgramWatched
{
  action: "watchedprograms/",
  method: "POST",
  fields: {
    programId: {}
  }
}

getWatchedPrograms
{
  href: "watchedprograms/{?maxDaysOld}",
  title: "Get Watched Programs for the account",
  templated: true
}

updateResumePoint
{
  action: "resumepoint/progress/",
  fields: {
    mediaId: {},
    programId: {},
    progress: {}
  }
  method: "POST"
  title: "Update Resume Point"
}
https://xtvapi.cloudtv.comcast.net/resumepoint/progress/
mediaId: comcast:media:program:account:guid:5649760609895628112:RogersTitleVI:hs00s.caHWST9051540000011232-DCJA4848390030985383
programId: 5649760609895628112
progress: 7473
markProgramWatched
{
  action: "watchedprograms/",
  method: "POST",
  fields: {
    programId: {}
  }
}

getWatchedPrograms
{
  href: "watchedprograms/{?maxDaysOld}",
  title: "Get Watched Programs for the account",
  templated: true
}

updateResumePoint
{
  action: "resumepoint/progress/",
  fields: {
    mediaId: {},
    programId: {},
    progress: {}
  }
  method: "POST"
  title: "Update Resume Point"
}
https://xtvapi.cloudtv.comcast.net/resumepoint/progress/
mediaId: comcast:media:program:account:guid:5649760609895628112:RogersTitleVI:hs00s.caHWST9051540000011232-DCJA4848390030985383
programId: 5649760609895628112
progress: 7473
*/


// returns empty object on error or success with an empty object otherwise the object
/*
async function convertStreamToObject(stream) {
  let json = '';

  const reader = stream.getReader();
  const decoder = new TextDecoder();
  const chunks = [];

  while (true) {
    const { done, value } = await reader.read();

    if (done) {
      const txt = chunks.join('');
      return JSON.parse(txt || '{}');
    }

    const chunk = decoder.decode(value, {stream: true});
    chunks.push(chunk);
  }

  return JSON.parse('{}');
}
*/


//returns and object with required headers added for fetch to use
function createFetchRequestHeaders(xsctAuthToken) {
  const headers = {
    'Accept': 'application/comcast+hal+json, application/json, */*; q=0.01',
    'Accept-Encoding': 'gzip, deflate, br, zstd',
    'Accept-Language': 'en-US,en;q=0.9',
    'Origin': 'https://ignitetv.rogers.com',
    'Referer': 'https://ignitetv.rogers.com/',
    'Host': 'xtvapi.cloudtv.comcast.net',
    'Connection': 'keep-alive',
    // one of these commented headers has an error
    /*
    'Referrer Policy': 'strict-origin-when-cross-origin',

    'Sec-Fetch-Dest': 'empty',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'cross-site',



    'X-Finity-Client-Info': 'app_name="Ignite TV"; app_version="7.4.0"; os_name="Web"; web_user_agent="Mozilla"',

    */
    'Fingerprint': 'cloudtv_web_polymer_7.4.0_prod_1715677697788_51894',
    'Client-Platform': 'web;linear-tve;local-tve;est;i18n-ratings;beta-channels;standard-sports-images;session;livod;local-tve-nbc-v3;record-tve',
    'X-Finity-Accept-Language': 'en-CA',
    'X-Finity-Features': 'aP1koSvIKH7QdUJ12MlT/R7F47oie94OmWtioE0NaInh+FvDqNmyF3pHD3Ub861Zd+PUk6pGGh5hBNSImdgL/3w1HvuBY57MOg4sMnQ6+0bsNA4IxNdJ7w9yJqUkVq4HfDFOpMcuS7owCXEk',
    'X-Hypergard': '6.0.0',

    'Authorization': null
  };
  headers.Authorization = 'CCP ' + xsctAuthToken;

  return headers;
}


async function sendRequest(request, extraHeaders) {
  const xsct = localStorage.getItem('tv-xsct');
  extraHeaders = extraHeaders || {};
  const headers = {...createFetchRequestHeaders(xsct), ...extraHeaders};
  const params = (new URLSearchParams(request.params)).toString();
  const options = {
    headers,
    method: request.method,
  };

  if (params.length) {
    if (request.method === 'POST') {
      options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
      options.body = params;
    }
    else if (request.method === 'GET') {
      request.url += '?' + params;
    }
  }

  return fetch(request.url, options)
    .then(response => new Response(response.body).json())
    .catch(error => console.dir);
}

/*
*/
const req_rid = [

  {
    // "search/term/{?query,ftmvod,freetome,limit,includeMenus,aliasName,includeStations,matchExactChannel,includeVodCompany}"
    url: 'https://xtvapi.cloudtv.comcast.net/search/term/',
    method: 'GET',
    params: {
      query: 'ridiculous',
      includeMenus: true,
    }
  },

  {
    // entity/detail/program/6774048176174390112/{?streamFormat,includeTve,includeTveLinear}
    url: 'https://xtvapi.cloudtv.comcast.net/entity/detail/program/6774048176174390112/',
    method: 'GET',
    params: {
    }
  },

  {
    // entity/series/{seriesId}/tvseason/{seasonNumber}/
    url: 'https://xtvapi.cloudtv.comcast.net/entity/series/6774048176174390112/tvseason/31/',
    method: 'GET',
    params: {
    }
  },

  {
    // entity/series/{seriesId}/tvseason/{seasonNumber}/
    url: 'https://xtvapi.cloudtv.comcast.net/entity/series/6774048176174390112/tvseason/41/',
    method: 'GET',
    params: {
    }
  },

  {
    // entity/series/{seriesId}/tvseason/{seasonNumber}/watchOptions/{?freetome,programsPerPage,programPage,programSortDir}
    url: 'https://xtvapi.cloudtv.comcast.net/entity/series/6774048176174390112/tvseason/31/watchOptions/',
    method: 'GET',
    params: {
      freetome: 'all',
    }
  },

  {
    // entity/series/{seriesId}/tvseason/{seasonNumber}/watchOptions/{?freetome,programsPerPage,programPage,programSortDir}
    url: 'https://xtvapi.cloudtv.comcast.net/entity/series/6774048176174390112/tvseason/41/watchOptions/',
    method: 'GET',
    params: {
      programsPerPage: 10,
      programPage: 1,
      programSortDir: 'desc',
    }
  },

  {
    // entity/series/{seriesId}/tvseason/{seasonNumber}/watchOptions/{?freetome,programsPerPage,programPage,programSortDir}
    url: 'https://xtvapi.cloudtv.comcast.net/entity/series/6774048176174390112/tvseason/41/watchOptions/',
    method: 'GET',
    params: {
      programsPerPage: 10,
      programPage: 0,
      programSortDir: 'desc',
    }
  },
/*
  {
    // browse/node/entity/{entityType}/{entityId}/{?depth,maxPrograms,filters,embedPlayNowDetail,freetome}
    url: 'https://xtvapi.cloudtv.comcast.net/browse/node/entity/{entityType}/{entityId}/',
    method: 'GET',
    params: {
      programsPerPage: 10,
      programPage: 0,
      programSortDir: 'desc',
    }
  },
*/

  {
    // entity/program/{programId}/upcomingListings/{?freetome}
    url: 'https://xtvapi.cloudtv.comcast.net/entity/program/6774048176174390112/upcomingListings/',
    method: 'GET',
    params: {
      freetome: 'all',
    }
  },

  {
    // search/entity/{?entityId,ftmvod,freetome,limit,includeVodCompany}
    url: 'https://xtvapi.cloudtv.comcast.net/search/entity/',
    method: 'GET',
    params: {
      entityId: '6774048176174390112',
      limit: 100,
      freetome: 'all',
    }
  },

  {
    // search/entity/{?entityId,ftmvod,freetome,limit,includeVodCompany}
    // freetome 'all' +?????
    //includeVodCompany bool
    url: 'https://xtvapi.cloudtv.comcast.net/search/entity/',
    method: 'GET',
    params: {
      entityId: '7016380549414581112',
      limit: 100,
      freetome: 'all',
    }
  },

];





// The Climb
// '/entity/series/6124985572721027112/tvseason/1/'
// '/entity/program/6124985572721027112/'

const requests = [
  {
    // ridic
    url: 'https://xtvapi.cloudtv.comcast.net/entity/program/6774048176174390112/',
    method: 'GET',
    params: {
    }
  },
  {
    // ridic
    url: 'https://xtvapi.cloudtv.comcast.net/entity/detail/program/6774048176174390112/',
    method: 'GET',
    params: {
    }
  },
  {
    // Margin of error (one off tv show)
    url: 'https://xtvapi.cloudtv.comcast.net/entity/program/6591212624131547112/',
    method: 'GET',
    params: {
    }
  },
  {
    // Margin of error (one off tv show)
    url: 'https://xtvapi.cloudtv.comcast.net/entity/program/6591212624131547112/',
    method: 'GET',
    params: {
    }
  },
  {
    // You Are What You Act (movie)
    url: 'https://xtvapi.cloudtv.comcast.net/entity/program/6236430486756019112/',
    method: 'GET',
    params: {
    }
  },




  {
    // ridic
    url: 'https://xtvapi.cloudtv.comcast.net/entity/series/6774048176174390112/tvseason/31/',
    method: 'GET',
    params: {
    }
  },
  {
    // ridic
    url: 'https://xtvapi.cloudtv.comcast.net/search/entity/',
    method: 'GET',
    params: {
      entityId: '6774048176174390112',
      // ftmvod: 1,
      // freetome: 1,
    }
  },
  {
    // ridic
    url: 'https://xtvapi.cloudtv.comcast.net/entity/series/6774048176174390112/tvseason/31/watchOptions/',
    method: 'GET',
    params: {
      freetome: 1,
    }
  },
  {
    // sg1
    url: 'https://xtvapi.cloudtv.comcast.net/entity/series/7188923726922774112/',
    method: 'GET',
    params: {
      freetome: 1,
    }
  },
  {
    // The Climb
    url: 'https://xtvapi.cloudtv.comcast.net/entity/series/6124985572721027112/tvseason/1/',
    method: 'GET',
    params: {
    }
  },
  {
    // The Climb
    url: 'https://xtvapi.cloudtv.comcast.net/entity/program/6124985572721027112/',
    method: 'GET',
    params: {
    }
  },


  {
    // The Twilight Zone
    url: 'https://xtvapi.cloudtv.comcast.net/entity/program/8866251514307483112/',
    method: 'GET',
    params: {
    }
  },
  {
    // The Twilight Zone: Of Late I Think of Cliffordville
    url: 'https://xtvapi.cloudtv.comcast.net/entity/program/5824220530445437112/',
    method: 'GET',
    params: {
    }
  },
  {
    // The Twilight Zone: Of Late I Think of Cliffordville
    url: 'https://xtvapi.cloudtv.comcast.net/entity/detail/program/5824220530445437112/',
    method: 'GET',
    params: {
    }
  },
  {
    // The Twilight Zone: Of Late I Think of Cliffordville
    url: 'https://xtvapi.cloudtv.comcast.net/entity/related/program/5824220530445437112/',
    method: 'GET',
    params: {
    }
  },


  {
    //
    url: 'https://xtvapi.cloudtv.comcast.net/entity/program/4718377049016975112/',
    method: 'GET',
    params: {
    }
  },



  {
    // The Twilight Zone: Of Late I Think of Cliffordville
    url: 'https://xtvapi.cloudtv.comcast.net/resumepoint/progress/',
    method: 'POST',
    params: {
      mediaId: 'comcast:dvr:schedule:V1247462785358186354L200342000429040024',
      programId: '5824220530445437112',
      progress: '3810000',
    }
  },
  {
    // The Twilight Zone: Of Late I Think of Cliffordville
    url: 'https://xtvapi.cloudtv.comcast.net/watchedprograms/',
    method: 'POST',
    params: {
      programId: '5824220530445437112',
    }
  },

  {
    // mission space series:abandoned engineering
    url: 'https://xtvapi.cloudtv.comcast.net/watchedprograms/',
    method: 'POST',
    params: {
      programId: '5817564908132739112',
    }
  },
  {
    // mission space series:abandoned engineering
    url: 'https://xtvapi.cloudtv.comcast.net/entity/program/5817564908132739112/',
    method: 'GET',
    params: {
    }
  },
  {
    // series:abandoned engineering
    url: 'https://xtvapi.cloudtv.comcast.net/entity/program/6932774445162525112/',
    method: 'GET',
    params: {
    }
  },
  {
    // True Romance
    url: 'https://xtvapi.cloudtv.comcast.net/resumepoint/progress/',
    method: 'POST',
    params: {
      mediaId: 'comcast:dvr:schedule:V1247462785358186354L200735711221020023',
      programId: '7323407574626897112',
      progress: '7590000',
      // progress: '0',
    }
  },
  {
    // True Romance
    url: 'https://xtvapi.cloudtv.comcast.net/watchedprograms/',
    method: 'POST',
    params: {
      programId: '7323407574626897112',
    }
  },
  {
    //
    url: 'https://xtvapi.cloudtv.comcast.net/recordings/completedWithoutResumePoints/',
    method: 'GET',
    params: {
    }
  },
  {
    //
    url: 'https://xtvapi.cloudtv.comcast.net/watchedprograms/',
    method: 'GET',
    params: {
    }
  },


];

  //true romance
  // listingId: 2007357112210200109
  // programId: 7323407574626897112

let res;

const req = [];
for (let i = 0; i < req_rid.length; i++) {
  req.push(sendRequest(req_rid[i]));
}
res = await Promise.allSettled(req);
for (let r of res) {
  console.dir(r.value);
}

// res = sendRequest(requests[0]);
// console.log(res);
// res = sendRequest(requests[1]);
// console.log(res);
// res = sendRequest(requests[2]);
// console.log(res);
// res = sendRequest(requests[3]);
// console.log(res);
// res = sendRequest(requests[4]);
// console.log(res);
// res = sendRequest(requests[6]);
// console.log(res);
// res = sendRequest(requests[7]);
// console.log(res);
// res = sendRequest(requests[8]);
// console.log(res);